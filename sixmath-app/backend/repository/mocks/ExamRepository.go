// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entity "rpl-sixmath/entity"

	mock "github.com/stretchr/testify/mock"

	model "rpl-sixmath/model"
)

// ExamRepository is an autogenerated mock type for the ExamRepository type
type ExamRepository struct {
	mock.Mock
}

// GetAllExam provides a mock function with given fields: orderBy
func (_m *ExamRepository) GetAllExam(orderBy string) ([]entity.Exam, error) {
	ret := _m.Called(orderBy)

	var r0 []entity.Exam
	if rf, ok := ret.Get(0).(func(string) []entity.Exam); ok {
		r0 = rf(orderBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Exam)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExamByID provides a mock function with given fields: examID
func (_m *ExamRepository) GetExamByID(examID int) (entity.Exam, error) {
	ret := _m.Called(examID)

	var r0 entity.Exam
	if rf, ok := ret.Get(0).(func(int) entity.Exam); ok {
		r0 = rf(examID)
	} else {
		r0 = ret.Get(0).(entity.Exam)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(examID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalQuestion provides a mock function with given fields: examId
func (_m *ExamRepository) GetTotalQuestion(examId int) (int64, error) {
	ret := _m.Called(examId)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int) int64); ok {
		r0 = rf(examId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(examId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertExam provides a mock function with given fields: request
func (_m *ExamRepository) InsertExam(request entity.Exam) (entity.Exam, error) {
	ret := _m.Called(request)

	var r0 entity.Exam
	if rf, ok := ret.Get(0).(func(entity.Exam) entity.Exam); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(entity.Exam)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Exam) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertQuestion provides a mock function with given fields: request
func (_m *ExamRepository) InsertQuestion(request model.CreateQuestionRequest) (entity.Question, error) {
	ret := _m.Called(request)

	var r0 entity.Question
	if rf, ok := ret.Get(0).(func(model.CreateQuestionRequest) entity.Question); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(entity.Question)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.CreateQuestionRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewExamRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewExamRepository creates a new instance of ExamRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExamRepository(t NewExamRepositoryT) *ExamRepository {
	mock := &ExamRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
