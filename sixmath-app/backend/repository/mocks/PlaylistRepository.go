// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entity "rpl-sixmath/entity"

	mock "github.com/stretchr/testify/mock"
)

// PlaylistRepository is an autogenerated mock type for the PlaylistRepository type
type PlaylistRepository struct {
	mock.Mock
}

// DeletePlaylist provides a mock function with given fields: playlistId
func (_m *PlaylistRepository) DeletePlaylist(playlistId int) error {
	ret := _m.Called(playlistId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(playlistId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindPlaylistAll provides a mock function with given fields:
func (_m *PlaylistRepository) FindPlaylistAll() ([]entity.Playlist, error) {
	ret := _m.Called()

	var r0 []entity.Playlist
	if rf, ok := ret.Get(0).(func() []entity.Playlist); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Playlist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPlaylistById provides a mock function with given fields: playlistId
func (_m *PlaylistRepository) FindPlaylistById(playlistId int) (entity.Playlist, error) {
	ret := _m.Called(playlistId)

	var r0 entity.Playlist
	if rf, ok := ret.Get(0).(func(int) entity.Playlist); ok {
		r0 = rf(playlistId)
	} else {
		r0 = ret.Get(0).(entity.Playlist)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(playlistId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPlaylist provides a mock function with given fields: playlist
func (_m *PlaylistRepository) InsertPlaylist(playlist entity.Playlist) (entity.Playlist, error) {
	ret := _m.Called(playlist)

	var r0 entity.Playlist
	if rf, ok := ret.Get(0).(func(entity.Playlist) entity.Playlist); ok {
		r0 = rf(playlist)
	} else {
		r0 = ret.Get(0).(entity.Playlist)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Playlist) error); ok {
		r1 = rf(playlist)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePlaylist provides a mock function with given fields: playlist
func (_m *PlaylistRepository) UpdatePlaylist(playlist entity.Playlist) (entity.Playlist, error) {
	ret := _m.Called(playlist)

	var r0 entity.Playlist
	if rf, ok := ret.Get(0).(func(entity.Playlist) entity.Playlist); ok {
		r0 = rf(playlist)
	} else {
		r0 = ret.Get(0).(entity.Playlist)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Playlist) error); ok {
		r1 = rf(playlist)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewPlaylistRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewPlaylistRepository creates a new instance of PlaylistRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPlaylistRepository(t NewPlaylistRepositoryT) *PlaylistRepository {
	mock := &PlaylistRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
