// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entity "rpl-sixmath/entity"

	mock "github.com/stretchr/testify/mock"

	model "rpl-sixmath/model"
)

// VideoRepository is an autogenerated mock type for the VideoRepository type
type VideoRepository struct {
	mock.Mock
}

// DeleteVideo provides a mock function with given fields: videoId
func (_m *VideoRepository) DeleteVideo(videoId int) error {
	ret := _m.Called(videoId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(videoId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllVideo provides a mock function with given fields: orderBy
func (_m *VideoRepository) FindAllVideo(orderBy string) ([]entity.Video, error) {
	ret := _m.Called(orderBy)

	var r0 []entity.Video
	if rf, ok := ret.Get(0).(func(string) []entity.Video); ok {
		r0 = rf(orderBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Video)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneRandomVideo provides a mock function with given fields:
func (_m *VideoRepository) FindOneRandomVideo() (entity.Video, error) {
	ret := _m.Called()

	var r0 entity.Video
	if rf, ok := ret.Get(0).(func() entity.Video); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(entity.Video)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindRecommendedVideo provides a mock function with given fields: pagination
func (_m *VideoRepository) FindRecommendedVideo(pagination model.Pagination) *model.Pagination {
	ret := _m.Called(pagination)

	var r0 *model.Pagination
	if rf, ok := ret.Get(0).(func(model.Pagination) *model.Pagination); ok {
		r0 = rf(pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Pagination)
		}
	}

	return r0
}

// FindVideoById provides a mock function with given fields: videoId
func (_m *VideoRepository) FindVideoById(videoId int) (entity.Video, error) {
	ret := _m.Called(videoId)

	var r0 entity.Video
	if rf, ok := ret.Get(0).(func(int) entity.Video); ok {
		r0 = rf(videoId)
	} else {
		r0 = ret.Get(0).(entity.Video)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(videoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertVideo provides a mock function with given fields: video
func (_m *VideoRepository) InsertVideo(video entity.Video) (entity.Video, error) {
	ret := _m.Called(video)

	var r0 entity.Video
	if rf, ok := ret.Get(0).(func(entity.Video) entity.Video); ok {
		r0 = rf(video)
	} else {
		r0 = ret.Get(0).(entity.Video)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Video) error); ok {
		r1 = rf(video)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVideo provides a mock function with given fields: video
func (_m *VideoRepository) UpdateVideo(video entity.Video) (entity.Video, error) {
	ret := _m.Called(video)

	var r0 entity.Video
	if rf, ok := ret.Get(0).(func(entity.Video) entity.Video); ok {
		r0 = rf(video)
	} else {
		r0 = ret.Get(0).(entity.Video)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Video) error); ok {
		r1 = rf(video)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewVideoRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewVideoRepository creates a new instance of VideoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVideoRepository(t NewVideoRepositoryT) *VideoRepository {
	mock := &VideoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
