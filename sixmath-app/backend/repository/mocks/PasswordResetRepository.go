// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entity "rpl-sixmath/entity"

	mock "github.com/stretchr/testify/mock"
)

// PasswordResetRepository is an autogenerated mock type for the PasswordResetRepository type
type PasswordResetRepository struct {
	mock.Mock
}

// DeleteToken provides a mock function with given fields: email
func (_m *PasswordResetRepository) DeleteToken(email string) error {
	ret := _m.Called(email)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertToken provides a mock function with given fields: reset
func (_m *PasswordResetRepository) InsertToken(reset entity.PasswordReset) (entity.PasswordReset, error) {
	ret := _m.Called(reset)

	var r0 entity.PasswordReset
	if rf, ok := ret.Get(0).(func(entity.PasswordReset) entity.PasswordReset); ok {
		r0 = rf(reset)
	} else {
		r0 = ret.Get(0).(entity.PasswordReset)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.PasswordReset) error); ok {
		r1 = rf(reset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: otp, email
func (_m *PasswordResetRepository) ValidateToken(otp int, email string) (entity.PasswordReset, error) {
	ret := _m.Called(otp, email)

	var r0 entity.PasswordReset
	if rf, ok := ret.Get(0).(func(int, string) entity.PasswordReset); ok {
		r0 = rf(otp, email)
	} else {
		r0 = ret.Get(0).(entity.PasswordReset)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(otp, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewPasswordResetRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewPasswordResetRepository creates a new instance of PasswordResetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPasswordResetRepository(t NewPasswordResetRepositoryT) *PasswordResetRepository {
	mock := &PasswordResetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
